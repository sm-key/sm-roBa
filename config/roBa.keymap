#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R    &kp T                                             &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D         &kp F    &kp G        &kp SINGLE_QUOTE      &kp MINUS      &kp H        &kp J  &kp K      &kp L    &lt 5 ENTER
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V    &kp B        &kp ESCAPE            &kp COLON      &kp N        &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_WIN  &kp DEL  &lt 2 SPACE  &mkp MB1              &kp BACKSPACE  &lt 4 SPACE                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        NUM {
            bindings = <
&none                       &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp EQUAL                                   &none      &none  &none          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&none                       &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp SLASH      &none          &none      &none  &none          &kp LEFT_BRACKET      &kp RIGHT_BRACKET
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PLUS      &kp MINUS      &trans         &none      &none  &kp LESS_THAN  &kp GREATER_THAN      &kp BACKSLASH
&trans                      &kp COMMA        &kp PERIOD       &kp DEL          &kp SPACE     &mkp MB1       &kp BACKSPACE  &kp SPACE                                              &kp RIGHT_SHIFT
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                                  &kp NUMBER_6  &kp N7          &kp N8          &kp N9        &kp N0
&none           &none         &none         &none         &none      &none         &none          &none         &mkp MB1        &kp UP_ARROW    &none         &mkp MB2
&kp LEFT_SHIFT  &none         &none         &none         &none      &none         &none          &none         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &none
&kp LCTRL       &kp LEFT_ALT  &kp LEFT_GUI  &kp DEL       &kp SPACE  &mkp MB1      &kp BACKSPACE  &kp SPACE                                                   &kp LEFT_SHIFT
            >;
        };

        SCROLL {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4   &kp F5                           &kp F6   &kp F7   &kp F8   &kp F9   &kp F10
&kp TAB         &trans        &trans        &trans   &trans     &trans        &trans  &kp F11  &kp F12  &kp F13  &kp F14  &trans
&kp LEFT_SHIFT  &trans        &trans        &trans   &trans     &trans        &trans  &trans   &trans   &trans   &trans   &trans
&kp LCTRL       &kp LEFT_ALT  &kp LEFT_GUI  &kp DEL  &kp SPACE  &mkp MB1      &trans  &trans                              &kp RIGHT_SHIFT
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
